from snakemake.utils import min_version

min_version("7.30.1")


configfile: "config/config_deploy.yaml"


container: config["mambaforge_container_version"]


rule all:
    input:
        config["output_path_json"],
        config["output_path_tsv"],


rule preprocess_deploy:
    input:
        read_path=config["input_h5ad"],
    output:
        save_path=config["output_preprocessed_h5ad"],
    params:
        organism=config["organism"],
        gene_id_column=config["gene_id_column_deploy"],
        batch_column=config["batch_column_deploy"],
        min_genes=config["min_genes"],
        min_cells=config["min_cells"],
        n_genes_by_counts_upper=config["n_genes_by_counts_upper"],
        pct_counts_mt_upper=config["pct_counts_mt_upper"],
        cell_cycle_genes_reference=config["cell_cycle_genes_reference"],
        filter_hvg=bool(config["filter_hvg"]),
        filter_hvg_n=config["filter_hvg_n"],
        target_column="",
        use_gene_id=config["use_gene_id"],
        na_string="",
        doublet_column=config["doublet_column_deploy"],
        doublet_value=config["doublet_value_deploy"],
        use_index_barcode=config["use_index_barcode_deploy"],
        barcode_column=config["barcode_column_deploy"],
        attrname=config["attrname"],
    log:
        stdout=f'logs/preprocess_deploy/{config["tissue"]}_{config["organism"]}_{config["id"]}.stdout',
        stderr=f'logs/preprocess_deploy/{config["tissue"]}_{config["organism"]}_{config["id"]}.stderr',
    conda:
        "envs/preprocess.yaml"
    shell:
        """
        python workflow/scripts/preprocess.py \
            --read_path {input.read_path} \
            --save_path {output.save_path} \
            --organism {params.organism} \
            --gene_id_column {params.gene_id_column} \
            --batch_column {params.batch_column} \
            --min_genes {params.min_genes} \
            --min_cells {params.min_cells} \
            --n_genes_by_counts_upper {params.n_genes_by_counts_upper} \
            --pct_counts_mt_upper {params.pct_counts_mt_upper} \
            --cell_cycle_genes_reference {params.cell_cycle_genes_reference} \
            --filter_hvg {params.filter_hvg} \
            --filter_hvg_n {params.filter_hvg_n} \
            --use_gene_id {params.use_gene_id} \
            --na_string {params.na_string} \
            --doublet_column {params.doublet_column} \
            --doublet_value {params.doublet_value} \
            --use_index_barcode {params.use_index_barcode} \
            --barcode_column {params.barcode_column} \
            --attrname {params.attrname} > {log.stdout} 2> {log.stderr}
        """


rule deploy_batch_correct:
    input:
        data_path=config["output_preprocessed_h5ad"],
        model_path=config["input_batch_model_dir"],
    output:
        embedding_path=config["output_embedding_path"],
    params:
        seed=config["seed"],
        check_val_every_n_epoch=config["check_val_every_n_epoch_deploy_batch"],
        max_epochs=config["max_epochs_deploy_batch"],
    log:
        stdout=f'logs/deploy_batch_correct/{config["tissue"]}_{config["organism"]}_{config["id"]}.stdout',
        stderr=f'logs/deploy_batch_correct/{config["tissue"]}_{config["organism"]}_{config["id"]}.stderr',
    conda:
        "envs/batch_correct.yaml"
    shell:
        """
        python workflow/scripts/batch_correct_inference.py \
            --data_path {input.data_path} \
            --embedding_path {output.embedding_path} \
            --model_path {input.model_path} \
            --check_val_every_n_epoch {params.check_val_every_n_epoch} \
            --max_epochs {params.max_epochs} \
            --seed {params.seed} > {log.stdout} 2> {log.stderr}
        """


rule deploy_model:
    input:
        data_path=config["output_embedding_path"],
        model_path_leaf_nodes=config["input_model_path_leaf"],
        model_path_non_leaf_nodes=config["input_model_path_non_leaf"],
        model_path_binarizer=config["input_model_path_binarizer"],
    output:
        output_path_json=config["output_path_json"],
        output_path_tsv=config["output_path_tsv"],
    params:
        hierarchy_path=config["hierarchy_path"],
        thresh=config["thresh"],
    log:
        stdout=f'logs/deploy_model/{config["tissue"]}_{config["organism"]}_{config["id"]}.stdout',
        stderr=f'logs/deploy_model/{config["tissue"]}_{config["organism"]}_{config["id"]}.stderr',
    conda:
        "envs/train_model.yaml"
    shell:
        """
        python workflow/scripts/predict_inference.py \
            --data_path {input.data_path} \
            --model_path_leaf_nodes {input.model_path_leaf_nodes} \
            --model_path_non_leaf_nodes {input.model_path_non_leaf_nodes} \
            --model_path_binarizer {input.model_path_binarizer} \
            --output_path_json {output.output_path_json} \
            --output_path_tsv {output.output_path_tsv} \
            --hierarchy_path {params.hierarchy_path} \
            --thresh {params.thresh} > {log.stdout} 2> {log.stderr}
        """
