from snakemake.utils import min_version

min_version("7.30.1")


configfile: "config/config_deploy.yaml"


container: config["mambaforge_container_version"]


rule all:
    input:
        config["output_model_path_leaf"],
        config["output_model_path_non_leaf"],
        config["output_model_path_binarizer"],


rule preprocess_train:
    input:
        read_path=config["input_h5ad"],
    output:
        save_path=config["output_preprocessed_h5ad"],
    params:
        organism=config["organism"],
        gene_id_column=config["gene_id_column"],
        batch_column=config["batch_column"],
        min_genes=config["min_genes"],
        min_cells=config["min_cells"],
        n_genes_by_counts_upper=config["n_genes_by_counts_upper"],
        pct_counts_mt_upper=config["pct_counts_mt_upper"],
        cell_cycle_genes_reference=config["cell_cycle_genes_reference"],
        filter_hvg=bool(config["filter_hvg"]),
        filter_hvg_n=config["filter_hvg_n"],
        target_column=config["target_column"],
        use_gene_id=config["use_gene_id"],
        na_string=config["na_string"],
        doublet_column=config["doublet_column"],
        doublet_value=config["doublet_value"],
        use_index_barcode=config["use_index_barcode"],
        barcode_column=config["barcode_column"],
        attrname=config["attrname"],
    log:
        stdout=f'logs/preprocess_train/{config["tissue"]}_{config["organism"]}_{config["id"]}.stdout',
        stderr=f'logs/preprocess_train/{config["tissue"]}_{config["organism"]}_{config["id"]}.stderr',
    conda:
        "envs/preprocess.yaml"
    shell:
        """
        python workflow/scripts/preprocess.py \
            --read_path {input.read_path} \
            --save_path {output.save_path} \
            --organism {params.organism} \
            --gene_id_column {params.gene_id_column} \
            --batch_column {params.batch_column} \
            --min_genes {params.min_genes} \
            --min_cells {params.min_cells} \
            --n_genes_by_counts_upper {params.n_genes_by_counts_upper} \
            --pct_counts_mt_upper {params.pct_counts_mt_upper} \
            --cell_cycle_genes_reference {params.cell_cycle_genes_reference} \
            --filter_hvg {params.filter_hvg} \
            --filter_hvg_n {params.filter_hvg_n} \
            --target_column {params.target_column} \
            --use_gene_id {params.use_gene_id} \
            --na_string {params.na_string} \
            --doublet_column {params.doublet_column} \
            --doublet_value {params.doublet_value} \
            --use_index_barcode {params.use_index_barcode} \
            --barcode_column {params.barcode_column} \
            --attrname {params.attrname} > {log.stdout} 2> {log.stderr}
        """


rule train_batch_correct:
    input:
        data_path=config["output_preprocessed_h5ad"],
    output:
        model_path=directory(config["output_batch_model_dir"]),
        embedding_path=config["output_embedding_path"],
    params:
        batch_key="batch_id",
        covariate_keys=config["covariate_keys"],
        n_latent=config["n_latent"],
        n_layers=config["n_layers"],
        n_epochs_scvi=config["n_epochs_scvi"],
        n_epochs_scanvi=config["n_epochs_scanvi"],
        label_column="y",
        seed=config["seed"],
    log:
        stdout=f'logs/train_batch_correct/{config["tissue"]}_{config["organism"]}_{config["id"]}.stdout',
        stderr=f'logs/train_batch_correct/{config["tissue"]}_{config["organism"]}_{config["id"]}.stderr',
    conda:
        "envs/batch_correct.yaml"
    shell:
        """
        python workflow/scripts/batch_correct.py \
            --data_path {input.data_path} \
            --batch_key {params.batch_key} \
            --covariate_keys {params.covariate_keys} \
            --model_path {output.model_path} \
            --n_latent {params.n_latent} \
            --n_layers {params.n_layers} \
            --n_epochs_scvi {params.n_epochs_scvi} \
            --n_epochs_scanvi {params.n_epochs_scanvi} \
            --label_key {params.label_column} \
            --embedding_path {output.embedding_path} \
            --seed {params.seed} > {log.stdout} 2> {log.stderr}
        """


rule train_model:
    input:
        data_path=config["output_embedding_path"],
    output:
        model_path_leaf_nodes=config["output_model_path_leaf"],
        model_path_non_leaf_nodes=config["output_model_path_non_leaf"],
        model_path_binarizer=config["output_model_path_binarizer"],
    params:
        hierarchy_path=config["hierarchy_path"],
        label_key="y",
        seed=config["seed"],
        n_jobs=config["n_jobs"],
        C=config["C"],
        tol=config["tol"],
        class_weight=config["class_weight"],
        max_iter=config["max_iter"],
    log:
        stdout=f'logs/train_model/{config["tissue"]}_{config["organism"]}_{config["id"]}.stdout',
        stderr=f'logs/train_model/{config["tissue"]}_{config["organism"]}_{config["id"]}.stderr',
    conda:
        "envs/train_model.yaml"
    shell:
        """
        python workflow/scripts/train.py \
            --data_path {input.data_path} \
            --model_path_leaf_nodes {output.model_path_leaf_nodes} \
            --model_path_non_leaf_nodes {output.model_path_non_leaf_nodes} \
            --model_path_binarizer {output.model_path_binarizer} \
            --hierarchy_path {params.hierarchy_path} \
            --label_key {params.label_key} \
            --seed {params.seed} > {log.stdout} \
            --n_jobs {params.n_jobs} \
            --C {params.C} \
            --tol {params.tol} \
            --class_weight {params.class_weight} \
            --max_iter {params.max_iter} 2> {log.stderr}
        """
