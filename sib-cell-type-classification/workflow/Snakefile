from snakemake.utils import min_version

min_version("7.30.1")


configfile: "config/config_deploy.yaml"


container: config["mambaforge_container_version"]


TRAIN_SAMPLES = ["train_head_dmelanogaster_unit"]

TEST_SAMPLES = ["deploy_head_dmelanogaster_unit"]


rule all:
    input:
        (
            expand("results/preprocess_train/{sample}.h5ad", sample=TRAIN_SAMPLES)
            + [
                (f"results/train_batch_correct/{'_'.join(sample .rsplit('_')[1:])}")
                for sample in TRAIN_SAMPLES
            ]
            + [
                (
                    f"results/train_model/{'_'.join(sample .rsplit('_')[1:])}_leaf_node_model.pkl"
                )
                for sample in TRAIN_SAMPLES
            ]
            + [
                (
                    f"results/deploy_batch_correct/embedding_{'_'.join(sample .rsplit('_')[1:])}.csv"
                )
                for sample in TEST_SAMPLES
            ]
            + [
                (f"results/deploy_model/path_{'_'.join(sample .rsplit('_')[1:])}.json")
                for sample in TEST_SAMPLES
            ]
        ),


rule preprocess_train:
    input:
        read_path="data/train_{tissue}_{organism}_{misc}.h5ad",
    output:
        save_path="results/preprocess_train/train_{tissue}_{organism}_{misc}.h5ad",
    params:
        organism=lambda wc: f"{wc.get('organism')}",
        gene_id_column=config["gene_id_column"],
        batch_column=config["batch_column"],
        min_genes=config["min_genes"],
        min_cells=config["min_cells"],
        n_genes_by_counts_upper=config["n_genes_by_counts_upper"],
        pct_counts_mt_upper=config["pct_counts_mt_upper"],
        cell_cycle_genes_reference=lambda wc: config[
            f"cell_cycle_genes_reference_{wc.get('organism')}"
        ],
        filter_hvg=bool(config["filter_hvg"]),
        filter_hvg_n=config["filter_hvg_n"],
        target_column=config["target_column"],
        use_gene_id=config["use_gene_id"],
        na_string=config["na_string"],
        doublet_column=config["doublet_column"],
        doublet_value=config["doublet_value"],
        use_index_barcode=config["use_index_barcode"],
        barcode_column=config["barcode_column"],
    log:
        stdout="logs/preprocess_train/train_{tissue}_{organism}_{misc}.stdout",
        stderr="logs/preprocess_train/train_{tissue}_{organism}_{misc}.stderr",
    conda:
        "envs/preprocess.yaml"
    shell:
        """
        python workflow/scripts/preprocess.py \
            --read_path {input.read_path} \
            --save_path {output.save_path} \
            --organism {params.organism} \
            --gene_id_column {params.gene_id_column} \
            --batch_column {params.batch_column} \
            --min_genes {params.min_genes} \
            --min_cells {params.min_cells} \
            --n_genes_by_counts_upper {params.n_genes_by_counts_upper} \
            --pct_counts_mt_upper {params.pct_counts_mt_upper} \
            --cell_cycle_genes_reference {params.cell_cycle_genes_reference} \
            --filter_hvg {params.filter_hvg} \
            --filter_hvg_n {params.filter_hvg_n} \
            --target_column {params.target_column} \
            --use_gene_id {params.use_gene_id} \
            --na_string {params.na_string} \
            --doublet_column {params.doublet_column} \
            --doublet_value {params.doublet_value} \
            --use_index_barcode {params.use_index_barcode} \
            --barcode_column {params.barcode_column} > {log.stdout} 2> {log.stderr}
        """


rule preprocess_deploy:
    input:
        read_path="data/deploy_{tissue}_{organism}_{misc}.h5ad",
    output:
        save_path="results/preprocess_deploy/deploy_{tissue}_{organism}_{misc}.h5ad",
    params:
        organism=lambda wc: f"{wc.get('organism')}",
        gene_id_column=config["gene_id_column_deploy"],
        batch_column=config["batch_column_deploy"],
        min_genes=config["min_genes"],
        min_cells=config["min_cells"],
        n_genes_by_counts_upper=config["n_genes_by_counts_upper"],
        pct_counts_mt_upper=config["pct_counts_mt_upper"],
        cell_cycle_genes_reference=lambda wc: config[
            f"cell_cycle_genes_reference_{wc.get('organism')}"
        ],
        filter_hvg=bool(config["filter_hvg"]),
        filter_hvg_n=config["filter_hvg_n"],
        target_column="",
        use_gene_id=config["use_gene_id"],
        na_string="",
        doublet_column=config["doublet_column_deploy"],
        doublet_value=config["doublet_value_deploy"],
        use_index_barcode=config["use_index_barcode_deploy"],
        barcode_column=config["barcode_column_deploy"],
    log:
        stdout="logs/preprocess_deploy/deploy_{tissue}_{organism}_{misc}.stdout",
        stderr="logs/preprocess_deploy/deploy_{tissue}_{organism}_{misc}.stderr",
    conda:
        "envs/preprocess.yaml"
    shell:
        """
        python workflow/scripts/preprocess.py \
            --read_path {input.read_path} \
            --save_path {output.save_path} \
            --organism {params.organism} \
            --gene_id_column {params.gene_id_column} \
            --batch_column {params.batch_column} \
            --min_genes {params.min_genes} \
            --min_cells {params.min_cells} \
            --n_genes_by_counts_upper {params.n_genes_by_counts_upper} \
            --pct_counts_mt_upper {params.pct_counts_mt_upper} \
            --cell_cycle_genes_reference {params.cell_cycle_genes_reference} \
            --filter_hvg {params.filter_hvg} \
            --filter_hvg_n {params.filter_hvg_n} \
            --use_gene_id {params.use_gene_id} \
            --na_string {params.na_string} \
            --doublet_column {params.doublet_column} \
            --doublet_value {params.doublet_value} \
            --use_index_barcode {params.use_index_barcode} \
            --barcode_column {params.barcode_column} > {log.stdout} 2> {log.stderr}
        """


rule train_batch_correct:
    input:
        data_path="results/preprocess_train/train_{tissue}_{organism}_{misc}.h5ad",
    output:
        model_path=directory("results/train_batch_correct/{tissue}_{organism}_{misc}"),
        embedding_path="results/train_batch_correct/embedding_{tissue}_{organism}_{misc}.h5ad",
    params:
        batch_key="batch_id",
        covariate_keys=config["covariate_keys"],
        n_latent=config["n_latent"],
        n_layers=config["n_layers"],
        n_epochs_scvi=config["n_epochs_scvi"],
        n_epochs_scanvi=config["n_epochs_scanvi"],
        label_column="y",
        seed=config["seed"],
    log:
        stdout="logs/train_batch_correct/{tissue}_{organism}_{misc}.stdout",
        stderr="logs/train_batch_correct/{tissue}_{organism}_{misc}.stderr",
    conda:
        "envs/batch_correct.yaml"
    shell:
        """
        python workflow/scripts/batch_correct.py \
            --data_path {input.data_path} \
            --batch_key {params.batch_key} \
            --covariate_keys {params.covariate_keys} \
            --model_path {output.model_path} \
            --n_latent {params.n_latent} \
            --n_layers {params.n_layers} \
            --n_epochs_scvi {params.n_epochs_scvi} \
            --n_epochs_scanvi {params.n_epochs_scanvi} \
            --label_key {params.label_column} \
            --embedding_path {output.embedding_path} \
            --seed {params.seed} > {log.stdout} 2> {log.stderr}
        """


rule deploy_batch_correct:
    input:
        data_path="results/preprocess_deploy/deploy_{tissue}_{organism}_{misc}.h5ad",
        model_path="results/train_batch_correct/{tissue}_{organism}_{misc}",
    output:
        embedding_path="results/deploy_batch_correct/embedding_{tissue}_{organism}_{misc}.csv",
    params:
        seed=config["seed"],
        check_val_every_n_epoch=config["check_val_every_n_epoch_deploy_batch"],
        max_epochs=config["max_epochs_deploy_batch"],
    log:
        stdout="logs/deploy_batch_correct/{tissue}_{organism}_{misc}.stdout",
        stderr="logs/deploy_batch_correct/{tissue}_{organism}_{misc}.stderr",
    conda:
        "envs/batch_correct.yaml"
    shell:
        """
        python workflow/scripts/batch_correct_inference.py \
            --data_path {input.data_path} \
            --embedding_path {output.embedding_path} \
            --model_path {input.model_path} \
            --check_val_every_n_epoch {params.check_val_every_n_epoch} \
            --max_epochs {params.max_epochs} \
            --seed {params.seed} > {log.stdout} 2> {log.stderr}
        """


rule train_model:
    input:
        data_path="results/train_batch_correct/embedding_{tissue}_{organism}_{misc}.h5ad",
    output:
        model_path_leaf_nodes="results/train_model/{tissue}_{organism}_{misc}_leaf_node_model.pkl",
        model_path_non_leaf_nodes="results/train_model/{tissue}_{organism}_{misc}_non_leaf_node_model.pkl",
        model_path_binarizer="results/train_model/{tissue}_{organism}_{misc}_binarizer.pkl",
    params:
        hierarchy_path=config["hierarchy_path"],
        label_key="y",
        seed=config["seed"],
    log:
        stdout="logs/train_model/{tissue}_{organism}_{misc}.stdout",
        stderr="logs/train_model/{tissue}_{organism}_{misc}.stderr",
    conda:
        "envs/train_model.yaml"
    shell:
        """
        python workflow/scripts/train.py \
            --data_path {input.data_path} \
            --model_path_leaf_nodes {output.model_path_leaf_nodes} \
            --model_path_non_leaf_nodes {output.model_path_non_leaf_nodes} \
            --model_path_binarizer {output.model_path_binarizer} \
            --hierarchy_path {params.hierarchy_path} \
            --label_key {params.label_key} \
            --seed {params.seed} > {log.stdout} 2> {log.stderr}
        """


rule deploy_model:
    input:
        data_path="results/deploy_batch_correct/embedding_{tissue}_{organism}_{misc}.csv",
        model_path_leaf_nodes="results/train_model/{tissue}_{organism}_{misc}_leaf_node_model.pkl",
        model_path_non_leaf_nodes="results/train_model/{tissue}_{organism}_{misc}_non_leaf_node_model.pkl",
        model_path_binarizer="results/train_model/{tissue}_{organism}_{misc}_binarizer.pkl",
    output:
        output_path_json="results/deploy_model/path_{tissue}_{organism}_{misc}.json",
        output_path_tsv="results/deploy_model/matrix_{tissue}_{organism}_{misc}.tsv",
    params:
        hierarchy_path=config["hierarchy_path"],
        thresh=lambda wc: config["thresh"][f"{wc.get('organism')}"][
            f"{wc.get('tissue')}"
        ],
    log:
        stdout="logs/deploy_model/{tissue}_{organism}_{misc}.stdout",
        stderr="logs/deploy_model/{tissue}_{organism}_{misc}.stderr",
    conda:
        "envs/train_model.yaml"
    shell:
        """
        python workflow/scripts/predict_inference.py \
            --data_path {input.data_path} \
            --model_path_leaf_nodes {input.model_path_leaf_nodes} \
            --model_path_non_leaf_nodes {input.model_path_non_leaf_nodes} \
            --model_path_binarizer {input.model_path_binarizer} \
            --output_path_json {output.output_path_json} \
            --output_path_tsv {output.output_path_tsv} \
            --hierarchy_path {params.hierarchy_path} \
            --thresh {params.thresh} > {log.stdout} 2> {log.stderr}
        """
